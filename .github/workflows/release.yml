name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"
          echo "Release tag: ${TAG}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Verify pyproject.toml version
        run: |
          uv sync
          PYPROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          RELEASE_VERSION="${{ steps.version.outputs.version }}"
          
          if [[ "$PYPROJECT_VERSION" != "$RELEASE_VERSION" ]]; then
            echo "Version mismatch!"
            echo "pyproject.toml version: $PYPROJECT_VERSION"
            echo "Release version: $RELEASE_VERSION"
            exit 1
          fi
          echo "Version validation passed: $RELEASE_VERSION"

  test:
    name: Pre-release Testing
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies and run tests
        run: |
          uv sync --all-groups
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Run full test suite
        run: make quality

      - name: Test package installation
        run: |
          # Build and install the package
          uv build
          uv tool install dist/*.whl --force
          
          # Test CLI is available
          proxywhirl --help
          
          # Test basic imports
          uv run python -c "import proxywhirl; print('âœ“ Package imports successfully')"

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate, test]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Build package
        run: |
          uv build
          
          # Verify build outputs
          ls -la dist/
          echo "Built packages:"
          find dist/ -name "*.whl" -o -name "*.tar.gz" | head -10

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 90

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, build]
    timeout-minutes: 10

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verify-metadata: true
          verbose: true

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, pypi]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation from git commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "First release of ProxyWhirl" >> CHANGELOG.md
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: "ProxyWhirl ${{ needs.validate.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: docs/pnpm-lock.yaml

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Update documentation
        run: |
          # Install dependencies
          uv sync --all-groups
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
          make docs-deps
          
          # Regenerate API docs with new version
          cd docs
          node scripts/generate-api-docs.mjs
          
          # Build updated docs
          make docs-build

      - name: Notify completion
        run: |
          echo "ðŸš€ Release ${{ needs.validate.outputs.version }} completed successfully!"
          echo "ðŸ“¦ PyPI: https://pypi.org/project/proxywhirl/"
          echo "ðŸ“š Docs: Updated automatically"
          echo "ðŸ”– GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"
